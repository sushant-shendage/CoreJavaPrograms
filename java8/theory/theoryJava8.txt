{
  Q:
  - when we go for lambda expression?
  - coding problem:print missing alphabets from given string
  -How to change default natural sorting of tree set?
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  -what is difference between abstract class and interface?
  -What is difference between array and arraylist?
  -What is difference between list and set?
  -What is difference between comparable and comparator?
  -What is difference between vector and arraylist?
  -What is difference between hashset , linkedhashset and treeset?
  -What is difference betwenn collection and collections?
  -What is difference between linkedlist and arraylist?
  -What is difference between map and collection?
  -Write code to check given number is palindrom or not?
  -
  -what is exception?
  -What is exception handling?
  -What is exception hirarchy?
  -Exception flow in java language programing
  -Difference betwenn exception and error
  -Difference between checked and checked exception
  -Explain try , catch and finally block
  -Explain differencre between throw and throws leyword
  -Difference between final,finally and finalize
  -When we will get NullPointerException ?
  -When we will get ArrayIndexOutOfBoundException ?
  -When we will get StringIndexOutOfBoundException ?
  -What is exceptionPropogation?

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
}
[12/12/2014]D2\\
 ==========================================================================================================================================\
  ***xyz***
 ==========================================================================================================================================/
[12/12/2014]//
{
  
  -ENUM
-INNER CLASS
-WHEN TO GO FOR SPECIFIC CLASS IN COLLECTION
    -oracal owned java from sun-microsystem in 2010
------------------------------------------------------------------------------------
  -using stream perform operation on collection
  -difference between capacity and size
------------------------------------------------------------------------------------
 WHY WE ARE LEARNING JAVA 1.8?wHY IT IS INTRODUCED ?
    ANSWER:
-1995  java 1.0
-2012-2013 black period for java language 
-started to migrate to other language leading to decrese value of java
  -reasions are 
     -leangthy boiler plate code (number of lines of code)
     -reqire more time for development
-to overcome this problem they java language creators introduced java 1.8 (March 18,2014)
  -version which reduce number of lines of code.version incorporated sevelral concept to achive code consizeness
  -due to this java servived 
  -again pepole shifted back to java language becase features or concepts introduced in java 1.8
   ANSWER:
    -most of the java project USES java 1.8 concept for code consizeness.Without using java 1.8 code duplication perccentage will be reduced.
------------------------------------------------------------------------------------

    SONARqUBE TOOL:tool is used to cheque code quality
       -duplicate code (10 to 70 % code ai acceptible)
       -check rules and conventions
       -check test cases(min 80% acceptible)

       -while doing project it is mandatory to use/implement java 8 features
------------------------------------------------------------------------------------
features introduced in java:
  -A]lambda expression
  -B]functional interface
  -F]predefined functional interface
  -c]static and default methods
  -D]:: oerator (method refrence)
  -E]constructor refrence
  -G]streams
  -H]date and time
  -I]OPtional class
------------------------------------------------------------------------------------ 
}


 
 
[11/12/2014]\\
 ==========================================================================================================================================\
 ***java 1.8 features:
  -introduced in March 18,2014 by 'oracal' company
  -the main advantage of java 1.8 is to reduce the number of lines of code 
  -concepts introduced in java 1.8 are ,
   -A] lambda expression
   -B] functional interface
   -c] static and default methods
   -D] :: oerator (method refrence)
   -E] constructor refrence
   -F] predefined functional interface
   -G] streams
   -H] date and time
   -I] Optional class
   -J] Diamond operator
   and other...(these concepts are used frequently)
   -these concepts leads to consizeness of code 

 ==========================================================================================================================================/
[11/12/2014]//


[11/12/2014]\\
 ==========================================================================================================================================\
 ***concept 01:lambada expression(LISP)***(Ananymous expression):
  -anonymous functional
  -It does not have modifiers 
  -it does not have identifier/name
  -It does not have return type
  -sytax:
    (optional:formal arguments)-->{
        //stmt
    };
  -EXAMPLES:
    ()-->{
        SYSO("THIS IS MSG")
    };
    ...
     ()-->SYSO("THIS IS MSG");
    ...
    -->SYSO("THIS IS MSG")
    ..........................................

    (int a)-->{return a*a}
    ...
    ( a)-->{return a*a}
    ...
    a-->{return a*a}
    ..........................................

    a--> a*a
    ..........................................

    ( a,b)-->{return a*b}
    ..........................................
    ( a,b)-->SYSO(a*b)
    

    {
        - functional interface holds lambda expression
    }

 -to hold lambda expression we need a functional interfacce 
 -the main objective of lambda of expression is enabling functional programing in java
 -LISP is programing language where they used lambda expression for the first time
 {functional programing is enabled with lambda expression released in java 1.8}
 -functional interface=Interface having single abstract method 
   -'@FunctionalInterface' annotation is recommanded to use
==========================================================================================================================================/
[11/12/2014]//

14/12/24
==========================================================================================================================================/
{
-ways to implement functional interface
-how to resolve problem/error occured while creating implementation class of interface?{T}
-"in lambda expression no need to specify datatype of formal argument" why?
--------------------------------------------------------------
}
-HOW CODE IS REDUCED?
-while writing lambda expression writing datatypes are optional
-parenthesis and curly braces are optional in case of single arument and statement respectively otherwise it is compulsory
-when there is single return statement ,should not write return statement otherwise will get error
-lambda expression is one of the way to implement functional interface
-number of argument in lambda expression and abstract method of functional interface must be equal
.... PGM.................................................................................................
public class Driver {
    public static void main(String[] args) {
        // overiding method in functional interface usinf=g lambda expression
        checkNumberEvenOdd var1 = (a) -> {
            return (a % 2 == 0) ? true : false;
        };
        System.out.println(var1.checkNum(7));
        // --------------------------------------------------------------------------------------
        // no compulsion to use parenthesis when there is single formal argument
        // no compulsion to use curly braces when there is single statement
        // implesit return type
        checkNumberEvenOdd var2 = a -> (a % 2 == 0) ? true : false;
        System.out.println(var2.checkNum(6));
    }
}
interface checkNumberEvenOdd {
    boolean checkNum(int n);
}
.....................................................................................................


functional interface:
-interface having single an=bstract method is called as functional interface
-feature introduced in java 1.8
- To hold lambda expression we need functional interface refrence variable
-'@FunctionalInterface' annotation is used to specify the functional interface
-inside functional interface we can have object class method as abstract method
  -we can have toString(),equals()  and hashcode() methods  as abstract method
  -why other are not abstract method
     -(clone is native)(finalize() depriciated)(other are final)

............................................................................................................
// package javapgms.oops.functionalinterface;
public class Driver1 {
    public static void main(String[] args) {
        
    }
}

 @FunctionalInterface
interface Demo1{
void m1();
}

@FunctionalInterface
interface Demo2{
void m1();
boolean equals(Object o);
}
// @FunctionalInterface
// interface Demo3{
// void m1();
// void m2();
// }
@FunctionalInterface
interface Demo4{
void m1();
 String toString();
}

@FunctionalInterface
interface Demo5{
void m1();
 int hashCode();
}

// @FunctionalInterface
// interface Demo6{
// void m1();
//  void finalize();
// }

// @FunctionalInterface
// interface Demo7{
// void m1();
//  void notify();
// }

// @FunctionalInterface
// interface Demo8{
// void m1();
//  Object clone();//as this is prefixed with protected
// }

// @FunctionalInterface
// interface Demo9{
// void m1();
//  Class getClass(); 
// }

// @FunctionalInterface
// interface Demo10{
//  void m1();
//  int hashCode();
//  String toString();
//  boolean equals();
// }

............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////



...PGM(example for lambda expression:01)..............................................................................................
public class Driver3 {
    public static void main(String[] args) {
        Voter var1= a-> (a>18)?"is eligible for voating":"not eligible for voating";
        System.out.println(var1.printVoterOrNot(19));
        System.out.println(var1.printVoterOrNot(15));

        Discount var2=a-> (a>60)?"Your are eligible for discount":"Your are not eligible for discount";
        System.out.println(var2.printDiscountMsg(99));
        System.out.println(var2.printDiscountMsg(15));

        Authorization var3=a-> (a.toLowerCase().equals("admin"))?"You are Authorized..!":"You are not Authorized..!";

        System.out.println(var3.printAuthorizationMsg("Admin"));
        System.out.println(var3.printAuthorizationMsg("team lead"));
    }
}
@FunctionalInterface
 interface Voter {
    String printVoterOrNot(int age);
}

@FunctionalInterface
 interface Discount {
    String printDiscountMsg(int age);
}

@FunctionalInterface
 interface Authorization {
    String printAuthorizationMsg(String roleName );
}
output//////////////////////////////////////////////////////////////////////////////////////
is eligible for voating
not eligible for voating
Your are eligible for discount
Your are not eligible for discount
You are Authorized..!
You are not Authorized..!
////////////////////////////////////////////////////////////////////////////////////////////
.................................................................................................

ASSIGNMENT:
-give imlementation for comaparable ,comparator and runnable interface using lambda expression

==========================================================================================================================================/

[16/12/24]\
==========================================================================================================================================\
***comparable vs comparator***
-Comparable and Comparator are predefined functional interface used for used for sorting of custom object 
.............................................................................................................
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

public class Driver4AssignmentComparableComparator {
    public static void main(String[] args) {
        List<UserInfo> userInfoList=new ArrayList<>();

        userInfoList.add(new UserInfo("AB-name1", 123));
        userInfoList.add(new UserInfo("AA-name1", 456));
        userInfoList.add(new UserInfo("C-name1", 789));
        userInfoList.add(new UserInfo("D-name1", 126));
        userInfoList.forEach(System.out::println);

        System.out.println("------sorting using comparable-------------------------------------");
        
        Collections.sort(userInfoList);
        userInfoList.forEach(System.out::println);
        System.out.println("----------sorting using comparator---------------------------------");
        userInfoList.sort((o1,o2)->o2.name.compareTo(o1.name));
        userInfoList.forEach(System.out::println);

        
    }
}
class UserInfo implements Comparable<UserInfo>{
    String name;
    int id;
    public UserInfo(String name, int id) {
        this.name = name;
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }

    //lambda expression to sort object in desending order..!
    Comparable<UserInfo> comparableObject = o -> o.name.compareTo(this.name);

@Override
public int compareTo(UserInfo o) {
return  comparableObject.compareTo(o);
}
    @Override
    public String toString() {
        return "id :"+id+" name :"+name;
    }


}

.............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
id :123 name :AB-name1
id :456 name :AA-name1
id :789 name :C-name1
id :126 name :D-name1
------sorting using comparable-------------------------------------
id :126 name :D-name1
id :789 name :C-name1
id :123 name :AB-name1
id :456 name :AA-name1
----------sorting using comparator---------------------------------
id :126 name :D-name1
id :789 name :C-name1
id :123 name :AB-name1
id :456 name :AA-name1
////////////////////////////////////////////////////////////////////////////////////////////////////////////
==========================================================================================================================================/
[16/12/24]/

[18/12/24]\
==========================================================================================================================================\
 -Runnable :
   -functional interface having only one method i.e run() method
   -prototype
   -present in java.lang package
   -introduced in jdk 1.0

   {
   - wraper class implements comparator and comparable   
   }
............................................................................................................
 public class Driver4Assignment1Task {
    public static void main(String[] args) {
        Runnable thread1= ()-> {
            for (int i = 0; i < 3; i++) {
            System.out.println("thread 1..!");
            }
        };
        Thread t1=new Thread(thread1);
        t1.start();

        Runnable thread2=()-> {
            for (int i = 0; i < 3; i++) {
            System.out.println("thread 2..!");
            }
        };
        Thread t2=new Thread(thread2);
        t2.start();

    }
}

............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
thread 1..!
thread 1..!
thread 2..!
thread 2..!
thread 2..!
thread 1..!
////////////////////////////////////////////////////////////////////////////////////////////////////////////

-print collection of treeset in decending order

public TreeSet(Comparator c){
  //statement
}
PQ:chang the default sorting (asending order) of treeset collection to desending order
PGM given below..
............................................................................................................
import java.util.Comparator;
import java.util.TreeSet;

public class Driver4 {
    public static void main(String[] args) {
        Comparator<Integer> comparatorObject = (o1, o2) -> o2.compareTo(o1);
        TreeSet<Integer> treesetlist = new TreeSet<>(comparatorObject);
        treesetlist.add(77);
        treesetlist.add(9);
        treesetlist.add(67);
        treesetlist.add(48);
        treesetlist.add(57);
        System.out
                .println("changing default ordering of treeset collection(desending..!)-----------------------------");
        System.out.println(treesetlist);

    }
}
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
[77, 67, 57, 48, 9]
////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
{

  functional interface=SAM
  what are native methods
  
}


NOTE:inside a functional interface we have object class method as abstract methods

inside object class we have 11 methods,
   8. `public String toString()`  
   2. `public boolean equals(Object obj)`  
   5. `public int hashCode()`  

   1. `protected Object clone() throws CloneNotSupportedException`  

   3. `protected void finalize() throws Throwable`  
   
   4. `public final Class<?> getClass()`  
   6. `public final void notify()`  
   7. `public final void notifyAll()`  
   9. `public final void wait() throws InterruptedException`  
   10. `public final void wait(long timeout) throws InterruptedException`  
   11. `public final void wait(long timeout, int nanos) throws InterruptedException`  
==========================================================================================================================================/
[18/12/24]/

[18/12/24]\
==========================================================================================================================================/
***Static methods in interface***
-It is introduced in jdk 1.8
-The main purpose of introducing static methods in interface to reduce number of lines of code to 
 increase the code readability and remove the duplicate code also
-we can call this method using method signature and interface name as refrence
-static methods can't be inherited the child class
-the implementation which is common for all the childs is written in static method in interface 
-we can have more than one static method inside interface
-we can have main method inside a interface
............................................................................................................
// package javapgms.java8.practicals.StaticMethods_02;

public class Driver1 {
    public static void main(String[] args) {
        Car1 ob1 = new Car1();
        Bicycal ob2 = new Bicycal();

        ob1.fuel();
        ob2.fuel();

        Vehical.commonActivity();

    }
}

interface Vehical {
    void fuel();

    static void commonActivity() {
        start();
        run();
        stop();

    }

    static void start() {
        System.out.print("START ");
    }

    static void run() {
        System.out.print("RUN ");
    }

    static void stop() {
        System.out.print("STOP ");
    }
}

class Car1 implements Vehical {
    @Override
    public void fuel() {
        System.out.println("fuel consumption:disel/petrol");
    }
}

class Bicycal implements Vehical {
    @Override
    public void fuel() {
        System.out.println("fuel consumption: No fuel");
    }
}
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
[COMMON FEATURES ] :calling | SMS | FM
[SMARTPHONES] : video call | play games |install and use apps | can run browser | camera
[TABLETS    ] :  can VIDEO  games | can code
////////////////////////////////////////////////////////////////////////////////////////////////////////////


............................................................................................................
// package javapgms.java8.practicals.StaticMethods_02;

public class Driver1 {
    public static void main(String[] args) {
        Car1 ob1 = new Car1();
        Bicycal ob2 = new Bicycal();

        ob1.fuel();
        ob2.fuel();

        Vehical.commonActivity();

    }
}

interface Vehical {
    void fuel();

    static void commonActivity() {
        start();
        run();
        stop();

    }

    static void start() {
        System.out.print("START ");
    }

    static void run() {
        System.out.print("RUN ");
    }

    static void stop() {
        System.out.print("STOP ");
    }
}

class Car1 implements Vehical {
    @Override
    public void fuel() {
        System.out.println("fuel consumption:disel/petrol");
    }
}

class Bicycal implements Vehical {
    @Override
    public void fuel() {
        System.out.println("fuel consumption: No fuel");
    }
}
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
fuel consumption:disel/petrol
fuel consumption: No fuel
START RUN STOP 
////////////////////////////////////////////////////////////////////////////////////////////////////////////
==========================================================================================================================================/
[18/12/24]/


[20/12/24]\
==========================================================================================================================================\
DEFAULT METHOD INSIDE A INTERFACE:
-	we can have default method inside a interface from jdk 1.8 version onwards 
-	a method which is default keyword is known as default keyword
-	default methods will get inherited to its child class
-	if you want to call /use default methods then object  creation is compulsory
-	the implementation which is common for most of the classes but inside some class we have to override that method then we write implementation is default method

............................................................................................................
package defaultsMethod;

public class Driver1 {
	public static void main(String[] args) {
		new Human().walk();
		new Cat().walk();
		new Goat().walk();
	}
}

interface Animal {
	default void walk() {
		System.out.println("Walking on 4 legs..!");
	}
	void eat();
	void sound();
}

class Human implements Animal {

	public void walk() {
		System.out.println("Walking on 2 legs..!");
	}

	@Override
	public void eat() {
		System.out.println(" eat both..!");
	}

	@Override
	public void sound() {
		System.out.println(" eat both..!");
	}
}

class Cat implements Animal {
	@Override
	public void eat() {
		System.out.println(" eat both..!");
	}

	@Override
	public void sound() {
		System.out.println(" eat both..!");
	}
}

class Goat implements Animal {
	@Override
	public void eat() {
		System.out.println(" eat both..!");
	}
	@Override
	public void sound() {
		System.out.println(" eat both..!");
	}
}
 


............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////

Walking on 2 legs..!
Walking on 4 legs..!
Walking on 4 legs..!
////////////////////////////////////////////////////////////////////////////////////////////////////////////

............................................................................................................
package defaultsMethod;

public class Driver2 {
	public static void main(String[] args) {
new Plant().mobility();
new Animals().mobility();
new Humans().mobility();
new MiccoOrganisms().mobility();

	}
}

interface LivingThings {
	default void mobility() {
		System.out.println("can move anywhere..!");
	}
}

class Plant implements LivingThings {
	public void mobility() {
		System.out.println("movement is not possible in plant..!");
	}
}

class Animals implements LivingThings {

}
class MiccoOrganisms implements LivingThings {

}

class Humans implements LivingThings {

}
 



............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
movement is not possible in plant..!
can move anywhere..!
can move anywhere..!
can move anywhere..!
////////////////////////////////////////////////////////////////////////////////////////////////////////////
==========================================================================================================================================\
[20/12/24]/


[00/00/00]\
==========================================================================================================================================\






............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
==========================================================================================================================================/
[00/00/00]/

[00/00/00]\
==========================================================================================================================================\


 




............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
==========================================================================================================================================/
[00/00/00]/

[00/00/00]\
==========================================================================================================================================\
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
 ............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////



==========================================================================================================================================/
[00/00/00]/

[00/00/00]\
==========================================================================================================================================\




==========================================================================================================================================/
[00/00/00]/
================================================================
Basic terminologies
  -COMPUTER
  -SOFTWARE
  -HARDWARE 

  -what is convention why we use convention

  -what is programing?what is the differnce between coding and programing
  -levels of programing languages
  -examples of HLL
  -why pweple shifted from lll to MLL to HLL?

  -what is compiler?
  -what is interpreter?
  -differce between compiler and interpreter (def|execute code...|error|usecase)
  -JDK|JRE|JVM

  -tell me about java language
================================================================

{
    predefined functional interface to perform common operation(jdk 1.8)
    example:CRUD operation

    instead of creating custom user defined functional interface we can use predefined functional interfacce 
    benefit:code readability and code reusability
            we can use it directly
    it makes development faster as programer nned not creat functional interface

}
12/27/24
=========================================================================================
***Predefined functional interface***
-Predefined functional interface introduced in jdk 1.8
-whenever we want to perform common operation like arithemetic operations and boolean type of operation 
  we explicitly we creat a functional interface
  But these operations are common on day to day programmer life 
-instead of creating our own functional interfacce to perform common operation we are going to take the help of pre-defined functional interface 
  those are 'predicate', 'function', 'consumer', supplier'..etc 
-the advantage of predefined functional interface is reducing the devlopment time and it will make code as more redable 
-----------------------------------------------------------------------------------------------------------
***predicate***[use predicate in java.util* package]
{
   

    default and static method
    and | or  |not |is equal


     when to go for predecate predefine interface?
     -for boolean operation

}

Predicat:
-It is predefined functional interface
-it is present in java.util.function package
-it is having only one abstract method i.e test
  -METHOD DECLARATION:public abstract test(T t)
    -Type of parameter
-introduced in jdk 1.8 
-we use when we want to perform boolean operation



............................................................................................................
// package javapgms.java8.practicals.predefinedFunctionalInterface;

import java.util.function.Predicate;

public class Driver1 {
    public static void main(String[] args) {
        //write a program to check givn number is even or odd using predefined functional interface
        Predicate <Integer> isOperationNumber=n->n%2==0;
         System.out.println(isOperationNumber.test(6));

         //write a program to check givn number is positive or negative using predefined functional interface
         isOperationNumber=n->n>0;
         System.out.println(isOperationNumber.test(-6));

         //write a program to check given string length is 5 or not
         Predicate <String> isOperationString=n->n.length()==5;
         System.out.println(isOperationString.test("abc"));

         //WPT check given is started with h  or not
         isOperationString=n->n.charAt(0)=='A';
         System.out.println(isOperationString.test("Abc"));

        //WPT check given is end with 'A'  or not
         isOperationString=n->n.charAt(n.length()-1)=='H';
         System.out.println(isOperationString.test("AbcH"));

        //string is having j or not
         isOperationString=n->n.contains("j");
         System.out.println(isOperationString.test("AbcH"));

         //number is in the range or not(10,30)
         isOperationNumber=n->n>=10 && n<=30;
         System.out.println(isOperationNumber.test(20));

          
    }
    
}

............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
true
false
false
true
true
false
true
////////////////////////////////////////////////////////////////////////////////////////////////////////////



-[How functional interface is implemented before 1.8]
interface CheckNumber{
    boolean chek(int i);
}
class ChildCheckNumber implements CheckNumber{
    public boolean check(int i){
        return i%2==0;
    }
}
class Driver{

    main(){
        ChildCheckNumber ckn  = new ChildCheckNumber();
        System.out.println(ckn.check(10) );
    }
}

coading questions 
p01]WPT check given string length is equal to 5 or not
p01]WPT check given is started with h  or not
po3]WPT check given is end with 'A'  or not
po3]string is having j or not
p]number is in the range or not(10,30)


............................................................................................................
// package javapgms.java8.practicals.predefinedFunctionalInterface;

import java.util.function.Predicate;

public class Driver2 {
    public static void main(String[] args) {
        Predicate<Object> isProperty = s -> s.toString().length() == 4;

        String arr[] = { "abcd", "difsd", "abhgcd" };

        for (String i : arr) {
            if (isProperty.test(i))
                System.out.println(i);
        }

        int arr2[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
        isProperty = s -> (Integer) s % 2 == 0;
        for (int i : arr2) {
            if (isProperty.test(i))
                System.out.print(i+" ");
        }

    }
}

............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
abcd
2 4 6 8
////////////////////////////////////////////////////////////////////////////////////////////////////////////

=========================================================================================
Assignment:5 examples of predicate


28/12/24\\
=========================================================================================
 
Function :
-presetni in java.util.Function and introduced in java.util.Function
-other than boolean type of operation then we will go for predefined functional interface 'function '
   - OR if we want to perform operation other than boolean operation then we will go for functional interface 'Function'
-Function <T  r>  T=type of parameter    r-return type
-Abstract method : public abstract R apply(T t)
-


.........................................before jdk 1.8...................................................................
interface Mulitipplication{
    int multiply(int i);
}

class MulitipplicationImp1 implements Mulitipplication{
public int mulitiply(){
    return i*3;
}
}

class Driver{
    main(){
        MulitipplicationImp1 ob1=new MulitipplicationImp1();
        ob1.mulitiply(2);
    }
}
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
6
////////////////////////////////////////////////////////////////////////////////////////////////////////////

...........................................with jdk 1.8.................................................................
// package javapgms.java8.practicals.predefinedFunctionalInterface.functionPredefinedFunctionalInterface;
import java.util.function.Function;

public class Driver1 {
    public static void main(String[] args) {
        Function<Integer, String> f1=n->n+"* 3 :"+(n*3)+"";
        System.out.println( f1.apply(5));
        System.out.println( f1.apply(1));

        f1=n-> "Square :"+n+"*"+n+" ="+(n*n)+" ";
        System.out.println( f1.apply(5));
        System.out.println( f1.apply(1));


        Function<String, Character > f2=n->n.charAt(0);
        System.out.println(f2.apply("this"));

        Function<String, String > f3=n->n.substring(0,2);
        System.out.println(f3.apply("this"));
    }
}

............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
5* 3 :15
1* 3 :3
Square :5*5 =25
Square :1*1 =1
t
th
////////////////////////////////////////////////////////////////////////////////////////////////////////////

coading question :
perform a multiple operation using fxi 'Function'
-WAP to print length of given string using java 8
-wAP for reverse string using java 1.8|calculate age based on birt year
............................................................................................................
/// package javapgms.java8.practicals.predefinedFunctionalInterface.functionPredefinedFunctionalInterface;

import java.util.function.Function;

public class Driver2 {
    public static void main(String[] args) {
        Function <String ,String> f1=n->"reversed string :"+new StringBuffer(n).reverse().toString();
        System.out.println(f1.apply("java"));

        Function <Integer ,Integer> f2=n->2024-n;
        System.out.println("Age :"+f2.apply(2004));

    }
}

............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
reversed string :avaj
Age :20
////////////////////////////////////////////////////////////////////////////////////////////////////////////

    {

        for Predicate and Function  boolean type is primitive and non-primitive datatype
    }

 
Consumer
-presetni in java.util.Consumer and introduced in  1.8
-Function <T  r>  T=type of parameter    r-return type
-Abstract method : public abstract void  accept(T t);
-when we will go for consumer :for printing purpose

............................................................................................................
import java.util.function.Consumer;

public class Driver1 {
    public static void main(String[] args) {
        Consumer <Integer> ob1=n->System.out.println(n);
        ob1.accept(546);
    }
    
}
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
546
////////////////////////////////////////////////////////////////////////////////////////////////////////////


forEach:
-it predefined default method present in iterable interface 
-it will take consumer  as aargument
-default void forEach(Consumer c)
............................................................................................................
// package javapgms.java8.practicals.predefinedFunctionalInterface.consumerpfxi;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;

public class Driver1 {
    public static void main(String[] args) {
        Consumer <Integer> ob1=n->System.out.println(n);
        ob1.accept(546);

        List <Integer> l1=Arrays.asList(10,20,30,40);
        l1.forEach(n->System.out.println(n));
        
        
    }   
}
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
546
10
20
30
40
////////////////////////////////////////////////////////////////////////////////////////////////////////////
-What are wild card charecters? ?super

=========================================================================================


30/12/24\\
=========================================================================================
{
    
}
=========================================================================================
30/12/24//
............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

............................................................................................................
............................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
28/12/24//