Q:In multithrading why we can't tell exact output of program?
Q:Which is the best way to define thread ?why?
P:program to prove threads are independent
P:program to get default name,current thread name,set own name to thread
P:program to rename thread
P:program to prove execution of main and custom thread

------------------------------------------------------------------------------------------------------------------------------------------
 -Multitasking
   -defination
   -type explanation
   -advantages of each type
   -applications of multithreading
   -why we can't tell exact output in multithreading
     -explanation
     -note on thread shedular
 -ways to define threads
   -2 ways explanatinon
   -which way is best ?why?
-thread class and it's methods and constructors
  -use
  -❌methods
  -❌constructors
-Thread life-cycle
-runnable interface
-diff:start() and run()
-when we can disturb,how?why to disturb thread?
-data inconsistency problem?solution for data inconsitency :Synchronisation using -->synchronized membre using -->'synchronized' keyword
-object level lock and class level lock
-synchronized method vs block
-static synchronized method
-yield methods of thread class
------------------------------------------------------------------------------------------------------------------------------------------


[--/--/--]\\
===============================================================================================\
-Multitasking:
   -it is part of jvm/present inside jvm
   -it is part of jvm/present inside jvm


-Thread shedular:
   -it is part of jvm/present inside jvm
   -thread shedular is responcible to shedule thread
   -In multithrading ,thread shedular decides which thrad should be exicuted
   -because thread shedular programer can't analyse exact output.
-Runnable interface:
   -It is functional interface present in java.lang package
   -It has one abstract method i.e run() method
   -prototype of run() method:'public abstract void run()'
   -Which is best way to define thread ?why?
     -Defining thread using runnable interface is the best way.Beacuse it provides us 
      flexibility to extend other class which was not possible using thread class
-Difference between start() and run() method:
   - present inside(thread class         |runnable interface              )
   -help us to     (create thread        |execute thread                  )
   -it is          (concrete method      |abstract method                 )
   -called         (only once for thread |called multiple times for thread)  
   -called         (explicitly           | implicitly                     ) ?????

-thread life-cycle :
 -In java all thread follow thread life-cycle.
 -thread life cycle consist of various states and that are,
   -new:when thread object is created
   -runnable:when main method is called and thread is ready for execution
   -running:thread shedular allocates processor for thread for execution
   -blocked:current thread excution paused for execution of higher priority thread 
   -terminated:after execution of thread ,thread will go to dead state


===============================================================================================/
[--/--/--]//





-thread. Sleep() is static method

-when thread is waiting or sleeping thread then and then only we can disturb thread
-by using interrupt method we can disturb executing thread
-when thread is interrupted ,exception occurred and catches in catch block
-it throws exception in presence of above states
  -it behaves as normal program in absence above mentioned states

-prototype is 'public void inturupt()'

-when we get illegal thread exception
-can we create our own exception?
  -using throw
  -difference between throw and throws 
  [19/11/24]\\
  ===============================================================================================\
  Q::How and why interrupt thread?
  Q::When it get interrupt?
     Ans: when thread is in waiting or sleeping thread

  ***HOW WE CAN INTURUPT A THREAD***
  -To interrupt a thread java thread will class will provide interrupt method
  -interrupt method will help us to disturb the executing thread
  -it is anon-static method
  -prototype: 'public void interrupt()'
  -If a thread are in waiting state are or sleeping state then only interrupt method will disturbs the thread
  -If a threads are not going in eighter in waiting state or sleeping state then interrupt method will wait till 
   to thread will go to waiting state or sleeping state
  -If threads are not at all going to waiting state or sleeping state then there is no impact of interrupt method 

  ===============================================================================================/
 [19/11/24]//
 Questions on string:
 01) String characters?
 02) why string are immutable?
 03) Why do we require OOPs concepts?
 04) what is object? Why we require object?
 05) What is constructor?
 06) What is constructor chaining? Why we do constructor chaining?
     ANS:-
         -We do constructor chaining in order to avoid duplicate code in constructors
 07) what is Encapsulation?
 08) difference between arraylist and vector?


What is data inconsistency problem?[!][program to demonstrate data inconsistency problem]
When multiple threads executing simultaneously on same resource(java object,variable or method) 
there might be chances of data consistence .To avoid this problem we go for Synchronization.

data consistency with analogy of biryani problem.
Solution: giving one person chance at a time
Solution: Executing one thread at a time instead of simultaneously

1)vectors are thread safe: One thread execute at time 
default size for vector=10  increases 100% in array list 50% increases

project of seat booking(implement it[!])


limitation of synchronization:
Time consuming as one thread is allowed to execute at a time
[21/11/24]\\
===============================================================================================\
  ***SYNCHRONISATION***
  TOPIC LEFT...
   -FILE HANDLING
   -JAVA 1.8

***Data inconsistency problem***:
  -when multiple threads are executing simultaneously on the same java object 
   then there may be chances of data inconsistency problem
  -diagram[!] showing object represented by circle of which let semi circle is set of non -synchronized method other right will part-synchronized
  -to overcome data inconsistency problem we go for synchronization .

***Synchronization*** :
  -To achieve synchronization java will provide 'Synchronized' keyword
  -Synchronization is the process by which we are going to control 
    accessibility of multiple threads to a particular resource object.
  -'Synchronized' is a modifier ,it is applicable only for 'methods'(for both static and non-static method) and 'blocks'
  -we can't use synchronized keyword for classes and variables
  -The main advantage of synchronization is we can overcome data inconsistency problem
  -The main disadvantage of synchronization is it will increase waiting period of other threads so that it affect the performance

{NOT RECOMMANDED TO ANSWER IN INTERVIEW}
TYPES OF SYNCHRONIZATION :
A] process synchronization
B] thread synchronization
   -a)Mutual  exclusion(synchronized block)(static synchronized method)
   -b)cooperation(inter thread communication)
      -wait and notify overloaded methods in object class
      -itc=threads communicating is each other using object-class's methods mentioned above
{
WAHT IS DEADLOCK?
WHAT ARE DEOMON THREADS?
}

***object level lock***:
-Whenever we are using synchronized concept automatically lock concept will come into picture 
  because synchronization is internally implemented by 'lock' concept
-In java each and every object is having it's own unique lock
-If any thread wants to execute synchronized  method then that thread should have object level lock 
  then it will execute synchronized method of the same object 
-If thread is having object level lock all synchronized method of the same object will be executed alone by that thread one by one
-if one thread having lock then all other threads are not allowed to execute synchronized method simultaneously
-Acquiring and releasing the lock is responsible by jvm or thread scheduler but as a programmer we are not responsible for that. 
-When one thread is executing synchronized method other threads are allowed to execute non--Synchronized method simultaneously

***class level lock***:(replace object with class in above points)

***Synchronized block***:
-Because of very few lines of code if we are getting the data inconsistency  problem then
  instead of making whole method as a synchronized we will write those statement inside a synchronized block
-the block which is prefixed with synchronized keyword is known as synchronized block 
-Synchronized(this){...}  or Synchronized(object reference){...}


Questions:
Q: What is method overloading?(in absence of method overloading what is problem? How it is resolved by method overloading?)Advantage?
Q: Constructor overloading
Q: What is inheritance ?Advantage ?
Q: Explain diamond problem
Q: Difference between method overloading and method overriding.
===============================================================================================/
 [21/11/24]//

{
vectors are synchronized while arraylist is not
}




 [21/11/24]\\
===============================================================================================\
{
  -using synchronized block we can reduce waiting period of threads 
  -instead of making whole method we can make specific set of statement/instruction(responsible for data inconsistency) 
    synchronized using synchronized block which will lead to reduce waiting period of thread
    Q:DIFFERENCE BETWEEN SYNCHRONIZED BLOCK AND SYNCHRONIZED METHOD
 -[!]program to demonstrate above statements
 -there is no specific order for modifiers in java
 -to make common variable for all object we make it as static variable
}

-the main advantage of synchronized block is ,it help us to reduce the waiting period of thread to improve the performance.

***STATIC SYNCHRONIZED METHOD***
-in java each and every class having there own lock
-if any threads wants to execute static synchronized method then that thread should have class level block
-If one thread is executing static synchronized method other threads are not allowed to execute static synchronized method
-Acquiring or releasing class level lock , depends on jvm or thread scheduler
//-diagram for class level lock 
===============================================================================================/
 [21/11/24]//

 
 [09/12/2024]\\
===============================================================================================\
{
   -communication:sharing of info
   -interthread communication for sharing of info
   -when to go for interthread communication(communication between thread)
   -technique by which thread comminicate with each other
   -***INTERTHREADCOMMINICATION(co-operation)
   -why interthread comminication is required
      -we have two threads t1 and t2
         -t2 requires data produced by t1
         -t1 should tell t2 that data is produced and t1 can recive it.to tell t2-t1 data is produced produce next data
         -one thread should execute at a time -synchronisation
            -while t1 producing data t2 should go to waiting state ,lly t1 should go waiting state while data consumption by t2

  -methods to achive interthread communication 
   -final void wait()
   -final void wait(long ms)
   -final void wait(long ms,int ns)
   -final void notify()
   -final void notifyAll()


   -all methods are final method
   -wait method will throw intterpted exception
   -we have to call above method for synchronised area
     -why :i want to execution of a single thread at a time
   -why all above methoda used in mutithreading are created in object class
      -thread can call on any java objects
   -[?]difference between diver class and method 

   -when we call above method all will throw checked exception have to handle using try-catch bock
   -thread expecting for updation should call wait() method and then call notify() method otherwise call notify()after call this will call wait () method 

   -thread should have object lock-thread should be owner
}

-***INTERTHREAD COMMUNICATION( CO-OPERATIONS)***
  -It is a technique by which multiple threads are going to communicate with each other 
  -when multiple threads are executing simultaniously ,some times threads want to communicate with each other 
    to exchang information in between them
  -to achive interthread communication java provides some methods and those are 
   -final void wait()
   -final void wait(long ms)
   -final void wait(long ms,int ns)
   -final void notify()
   -final void notifyAll()
     -all these methods are present in java.lang.object class because thread can call these methods on any java obbject
     -all are final methods
     -wait methods will always throws checked exception and it is highly recommanded to handle when we are using this methods
     -we can call these methods only on synchronised area otherwise will get a exception
  -the thread which is expecting updation is responsible to call wait() method 
  -the thread which is responsible for updation will call notify() method

    
............................................................................................
class A {
   int i;
   boolean flag=false;

   public synchronized void produce(int i){
    if(flag)
    try {
      wait();
    }catch(IntrruptedException e){
      e.printStackTrace();
    }
    this.i=i;
    flag=true;
    System.out.println("data produced :"+i);
    notify();
   }

   public synchronized int consume(){
    if(!flag)
    try{
      wait();
    }catch(InterruptedException e){
       e.printStackTrace();
    }
    flag=false;
    System.out.println("Data consumed :"+i);
   }
 
}

class myThread extends Threads{
  A obj;
  public myThreadA(A obj){
    this.obj=obj;
  }
  public void run(){
    for(  ,  , ){
      obj.produce();
    }
  }
}

class myThreadB extends Threads{
  A obj;
  public myThreadA(A obj){
    this.obj=obj;
  }
  public void run(){
    for(  ,  , ){
      obj.consume();
    }
  }
}

public class Driver{
  main(){
    A a=new A();

    MyThreadA t1=new MyThreadA(a)
  }
}

............................................................................................
===============================================================================================/
[09/12/2024]//


[10/12/2024]\\
===============================================================================================\
{
  DEADLOCK:2 or more threads are waiting for each other forever...

  when deadlock occurs?
  -in synchronaisation lock conceot is used also introduce lock
}
- Deadlock :
  -when two or more threads are waiting for each other forever such type of infinity waiting period is called as deadlock
  -when we are using a synchronized keyword then only there is chance of deadlock situation
  -whenever we are using synchronized keyword we have to take special care of that writing code is leading to deadlock or not
  
.....................................PROGRAM TO DEMONSTRATE DEADLOCK.......................................................
public class Driver1 {
    public static void main(String[] args) {
        MyThread1 t1=new MyThread1();
        t1.start();
        MyThread2 t2=new MyThread2();
        t2.start();

        System.out.println("active threads :"+Thread.activeCount());
    }
    
}
class  MyThread1 extends Thread {
    @Override
    public synchronized void run() {
        try {
            wait();
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        for (int i = 0; i <=10; i++) {
            System.out.println("I am thread 1");
        }
    }
}

class MyThread2 extends Thread{
    @Override
    public synchronized void run() {
        try {
            wait();
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        for (int i = 0; i <=10; i++) {
            System.out.println("I am thread 2");
        }
    }
}
............................................................................................
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\OUTPUTS\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
OUTPUT1:
ACTIVE THREAD :3
<executing program for infnite time as deadlock occured..!>
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
===============================================================================================/
[10/12/2024]//

===============================================================================================/
[10/12/2024]//
{
  daemon:the threads which are executing background for execution of non-daemon thread
  example of daemn thread:garbage collection

  why we can't chane nature of main thread and child thread?//driver 2/
}

***DAEMON THREAD***
 -The threads which are executing at background are called as daemon thread
 -The main objective of daemon thread to provide support for non-daemon thread for there proper execution 
   -example :garbadge collection
 -Thread class will provide some methods for daemon thread and those are 
   -isDeamon()     return type -->boolean  use:used to check..
   -setDaemon()   return type -->void use:used to set nature of thread
 -When we want to change nature of any thread then we have to change before starting that thread
 -child thread have nature as parent thread
 -if we are changing daemon nature after creating a thread /after starting a thread 
   i.e after calling start() method then we will get a exception
   -Exception we get:IllegatThreadStateException
............................................................................................
public class Driver1 {
    public static void main(String[] args) {
        boolean flag=Thread.currentThread().isDaemon();
        System.out.println((flag)?"daemon thread":"non-daemon thread" );

        Mythread t1=new Mythread();
        // t1.setDaemon(true);
        t1.start();
        System.out.println((t1.isDaemon())?"daemon thread":"non-daemon thread" );

    }
}

class Mythread extends Thread{
     
   
}
............................................................................................
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\OUTPUTS\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
OUTPUT1:
non-daemon thread
non-daemon thread
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


deafult nature of main thread:
 -bydeafult main thread is a nion-daemon in nature 
 -we can't change the daemon nature of main thread because if we want to chane nature of any 
   thread then we have to change before stating a thread but main thread is always started by jvm 
.........................pgm to prove main thread is non-daemon.................................

   public class Driver1 {
    public static void main(String[] args) {
      
        System.out.println((Thread.currentThread().isDaemon())?"daemon thread":"non-daemon thread" );

        // Mythread t1=new Mythread();
        // // t1.setDaemon(true);
        // t1.start();
        // System.out.println((t1.isDaemon())?"daemon thread":"non-daemon thread" );

    }
}
............................................................................................
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\OUTPUTS\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
non-daemon thread
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\



.........................pgm to prove we can't vhange default nature of main thread..........

   public class Driver1 {
    public static void main(String[] args) {
      
      Thread.currentThread.setDaemon(true);
        System.out.println((Thread.currentThread().isDaemon())?"daemon thread":"non-daemon thread" );

    }
}
............................................................................................
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\OUTPUTS\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
non-daemon thread
Exception in thread "main" java.lang.IllegalThreadStateException
        at java.lang.Thread.setDaemon(Unknown Source)
        at Driver1.main(Driver1.java:7)
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
===============================================================================================/
[10/12/2024]//

-MULTITHREADING:
  -☑️multitasking 
  -☑️advantages and application
  -☑️how to cret thread?whixh is better and why?
  -☑️start and run method
  -☑️o/p analysis
  -☑️thread dhedular
  -☑️methods related to thread
  -☑️explain threads are independent
  -☑️how to prevent thread
  -☑️how to intruppt thread
  -☑️data inconsistencty pproblem
  -☑️Synchronisation
  -☑️synchronisation block and class
  -☑️class and object lebvel lock
  -☑️diff join yield and sleep method
  -☑️interthread communication
  -☑️deadlock
  -☑️daemon thread

- Multitasking and its type and advantages of type(t)
- Applications of multithreading(t)
- What is thread ?Difference between thread and process(t)
- Ways to create thread ? Which is best way and why?(t)
- Methods of thread class and constructor with use explanation(t+p)
- Difference between start() and run() method(t)
- Uncertainty in o/p with explanation(t)
- About ‘thread scheduler’(t)
- Explain threads are independent .Write code to prove(t+p)
- Why we prevent threads ? ways to prevent threads?(t+p)
- Difference between yield () ,join and sleep() method(t+p)
- Why we interrupt method? How to interrupt method?(t+p)
- Explain what is ‘data inconsistency problem’ ? How it is resolved ?(t+p)
- Explain what is Synchronization?(t+p)
- Tell me about ‘Synchronized’ keyword(t+p)
- Give difference between Synchronized block and method(t+p)
- Explain lock concept?(t)
- Give difference between object level lock and class level lock(t)
- Tell me about ‘ interthread communication’(t+p)
- Tell me about deadlock(t)
- Tell me about daemon thread(t+p)
